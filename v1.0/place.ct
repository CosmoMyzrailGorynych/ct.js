/***************************************

          [ place cotomod ]

   [ (c) Cosmo Myzrail Gorynych 2013 ]

***************************************/

ct.place = {
  'm':1,
  'check' : {
    'rect.rect': function (x1,y1,x2,y2,xx1,yy1,xx2,yy2) {
      return((((x1>=xx1&&x1<=xx2)||(x2>=xx1&&x2<=xx2) )&&((y1>=yy1&&y1<=yy2)||(y2>=yy1&&y2<=yy2)))||(((xx1>=x1&&xx1<=x2)||(xx2>=x1&&xx2<=x2))&&((yy1>=y1&&yy1<=y2)||(yy2>=y1&&yy2<=y2))))||((((x1>=xx1&&x1<=xx2)||(x2>=xx1&&x2<=xx2))&&((yy1>=y1&&yy1<=y2)||(yy2>=y1&&yy2<=y2)))||(((xx1>=x1&&xx1<=x2)||(xx2>=x1&&xx2<=x2))&&((y1>=yy1&&y1<=yy2)||(y2>=yy1&&y2<=yy2))));
    },
    'line.line': function (x1,y1,x2,y2,x3,y3,x4,y4) {
      return(((x3-x1)*(y2-y1)-(y3-y1)*(x2-x1))*((x4-x1)*(y2-y1)-(y4-y1)*(x2-x1))<=0)&&(((x1-x3)*(y4-y3)-(y1-y3)*(x4-x3))*((x2-x3)*(y4-y3)-(y2-y3)*(x4-x3))<=0);
    },
    'circle.circle': function (x1,y1,r1,x2,y2,r2) {
      return((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)<=(r1+r2)*(r1+r2));
    },
    'circle.point': function (x1,y1,r1,x2,y2) { 
      return((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)<=r1*r1);
    },
    'circle.rect': function (x1,y1,r1,x2,y2,x3,y3) {
      return((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)<=r1*r1 || (x2-x1)*(x2-x1)+(y3-y1)*(y3-y1)<=r1*r1 || (x3-x1)*(x3-x1)+(y2-y1)*(y2-y1)<=r1*r1 || (x3-x1)*(x3-x1)+(y3-y1)*(y3-y1)<=r1*r1 || ct.place.check['rect.point'](x2,y2,x3,y3,x1+r1,y1) || ct.place.check['rect.point'](x2,y2,x3,y3,x1,y1+r1) || ct.place.check['rect.point'](x2,y2,x3,y3,x1,y1-r1) || ct.place.check['rect.point'](x2,y2,x3,y3,x1-r1,y1));
    },
    'rect.point': function (x1,y1,x2,y2,x3,y3) {
      return((x3>=x1&&x3<=x2&&y3>=y1&&y3<=y2)||(x3<=x1&&x3>=x2&&y3<=y1&&y3>=y2));
    },
  },
  'free': function (me,x,y,type) {
    if (type) {
      for (i in ct.stack) {
        if (ct.stack[i].shape && ct.stack[i] !== me && ct.stack[i].ctype == type) {
          if (ct.stack[i].shape + '.' + me.shape == 'rect.rect') {
            if (ct.place.check['rect.rect'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x - me.left, y - me.top,x + me.right,y + me.bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.circle') {
            if (ct.place.check['circle.circle'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y,me.r))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.rect') {
            if (ct.place.check['circle.rect'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x - me.left, y - me.top,x + me.right,y + me.bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'rect.circle') {
            if (ct.place.check['circle.rect'](x,y,me.r,ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.point') {
            if (ct.place.check['circle.point'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.circle') {
            if (ct.place.check['circle.point'](x,y,me.r,ct.stack[i].x,ct.stack[i].y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.point') {
            if (ct.stack[i].y == y && ct.stack[i].x == x)
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.rect') {
            if (ct.place.check['rect.point'](x - me.left, y - me.top,x + me.right,y + me.bottom,ct.stack[i].x,ct.stack[i].y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'rect.point') {
            if (ct.place.check['rect.point'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x,y))
              return false;
          }
        }
      }
    } else {
      for (i in ct.stack) {
        if (ct.stack[i].shape && ct.stack[i] !== me) {
          if (ct.stack[i].shape + '.' + me.shape == 'rect.rect') {
            if (ct.place.check['rect.rect'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x - me.left, y - me.top,x + me.right,y + me.bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.circle') {
            if (ct.place.check['circle.circle'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y,me.r))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.rect') {
            if (ct.place.check['circle.rect'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x - me.left, y - me.top,x + me.right,y + me.bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'rect.circle') {
            if (ct.place.check['circle.rect'](x,y,me.r,ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'circle.point') {
            if (ct.place.check['circle.point'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.circle') {
            if (ct.place.check['circle.point'](x,y,me.r,ct.stack[i].x,ct.stack[i].y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.point') {
            if (ct.stack[i].y == y && ct.stack[i].x == x)
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'point.rect') {
            if (ct.place.check['rect.point'](x - me.left, y - me.top,x + me.right,y + me.bottom,ct.stack[i].x,ct.stack[i].y))
              return false;
          } else if (ct.stack[i].shape + '.' + me.shape == 'rect.point') {
            if (ct.place.check['rect.point'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x,y))
              return false;
          }
        }
      }
    }
    return true;
  },
  'meet': function (me,x,y,type) {
    for (i in ct.stack) {
      if (ct.stack[i].shape &&ct.stack[i]!== me && ct.stack[i].type == type) {
        if (ct.stack[i].shape + '.' + me.shape == 'rect.rect') {
          if (ct.place.check['rect.rect'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x - me.left, y - me.top,x + me.right,y + me.bottom))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'circle.circle') {
          if (ct.place.check['circle.circle'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y,me.r))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'circle.rect') {
          if (ct.place.check['circle.rect'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x - me.left, y - me.top,x + me.right,y + me.bottom))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'rect.circle') {
          if (ct.place.check['circle.rect'](x,y,me.r,ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'circle.point') {
          if (ct.place.check['circle.point'](ct.stack[i].x,ct.stack[i].y,ct.stack[i].r,x,y))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'point.circle') {
          if (ct.place.check['circle.point'](x,y,me.r,ct.stack[i].x,ct.stack[i].y))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'point.point') {
          if (ct.stack[i].y == y && ct.stack[i].x == x)
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'point.rect') {
          if (ct.place.check['circle.point'](x - me.left, y - me.top,x + me.right,y + me.bottom,ct.stack[i].x,ct.stack[i].y))
            return ct.stack[i];
        } else if (ct.stack[i].shape + '.' + me.shape == 'rect.point') {
          if (ct.place.check['circle.point'](ct.stack[i].x - ct.stack[i].left, ct.stack[i].y - ct.stack[i].top,ct.stack[i].x + ct.stack[i].right,ct.stack[i].y + ct.stack[i].bottom,x,y))
            return ct.stack[i];
        }
      }
    }
    return false;
  },
  'lastdist': null,
  'nearest': function (x,y,type) {
    if (ct.types.list[type].length > 0) {
        var dist = Math.sqrt(Math.abs((x-ct.types.list[type][0].y)*(y-ct.types.list[type][0].y)));
        var inst = ct.types.list[type][0];
        var i;
        for (i in ct.types.list[type]) {
            if (Math.sqrt(Math.abs((x-ct.types.list[type][i].y)*(y-ct.types.list[type][i].y))) < dist) {
                dist = Math.sqrt(Math.abs((x-ct.types.list[type][i].y)*(y-ct.types.list[type][i].y)));
                inst = ct.types.list[type][i];
            }
        }
        ct.place.lastdist = dist;
        return inst;
    } else
        return false;
  },
  'furthest': function (x,y,type) {
    if (ct.types.list[type].length > 0) {
        var dist = Math.sqrt(Math.abs((x-ct.types.list[type][0].y)*(y-ct.types.list[type][0].y)));
        var inst = ct.types.list[type][0];
        var i;
        for (i in ct.types.list[type]) {
            if (Math.sqrt(Math.abs((x-ct.types.list[type][i].y)*(y-ct.types.list[type][i].y))) > dist) {
                dist = Math.sqrt(Math.abs((x-ct.types.list[type][i].y)*(y-ct.types.list[type][i].y)));
                inst = ct.types.list[type][i];
            }
        }
        ct.place.lastdist = dist;
        return inst;
    } else
        return false;
  },
  'go': function (me,x,y,speed,type) {
      if (ct.pdc(me.x,me.y,x,y)<speed) return;
      var dir = ct.pdn(me.x,me.y,x,y);
      if (type) {
        if (ct.place.free(me,me.x+ct.ldx(speed,dir),me.y+ct.ldy(speed,dir),type)) {
            me.x += ct.ldx(speed,dir);
            me.y += ct.ldy(speed,dir);
            me.dir = dir;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+30*ct.place.m),me.y+ct.ldy(speed,dir+30*ct.place.m),type)) {
            me.x += ct.ldx(speed,dir+30*ct.place.m);
            me.y += ct.ldy(speed,dir+30*ct.place.m);
            me.dir = dir+30*ct.place.m;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+60*ct.place.m),me.y+ct.ldy(speed,dir+60*ct.place.m),type)) {
            me.x += ct.ldx(speed,dir+60*ct.place.m);
            me.y += ct.ldy(speed,dir+60*ct.place.m);
            me.dir = dir+60*ct.place.m;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+90*ct.place.m),me.y+ct.ldy(speed,dir+90*ct.place.m),type)) {
            me.x += ct.ldx(speed,dir+90*ct.place.m);
            me.y += ct.ldy(speed,dir+90*ct.place.m);
            me.dir = dir+90*ct.place.m;
        }
      } else {
        if (ct.place.free(me,me.x+ct.ldx(speed,dir),me.y+ct.ldy(speed,dir))) {
            me.x += ct.ldx(speed,dir);
            me.y += ct.ldy(speed,dir);
            me.dir = dir;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+30*ct.place.m),me.y+ct.ldy(speed,dir+30*ct.place.m))) {
            me.x += ct.ldx(speed,dir+30*ct.place.m);
            me.y += ct.ldy(speed,dir+30*ct.place.m);
            me.dir = dir+30*ct.place.m;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+60*ct.place.m),me.y+ct.ldy(speed,dir+6*ct.place.m))) {
            me.x += ct.ldx(speed,dir+60*ct.place.m);
            me.y += ct.ldy(speed,dir+60*ct.place.m);
            me.dir = dir+60*ct.place.m;
        } else if (ct.place.free(me,me.x+ct.ldx(speed,dir+90*ct.place.m),me.y+ct.ldy(speed,dir+90*ct.place.m))) {
            me.x += ct.ldx(speed,dir+90*ct.place.m);
            me.y += ct.ldy(speed,dir+90*ct.place.m);
            me.dir = dir+90*ct.place.m;
        }
      }
  }
};
ct.place.check['rect.circle'] = ct.place.check['circle.rect'];
ct.place.check['point.circle'] = ct.place.check['circle.point'];
ct.place.check['point.rect'] = ct.place.check['rect.point'];
setInterval('ct.place.m*=-1;',489);
ct.libs += ' place';